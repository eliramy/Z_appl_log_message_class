*&---------------------------------------------------------------------*
*& Report  Z_appl_log
*&---------------------------------------------------------------------*
REPORT z_appl_log.

START-OF-SELECTION.

  DATA(lt_ret) = VALUE bapiret2_t( ( type = 'E'
                                     id   = 'FMUP'
                                     number = '127' ) ).

  PERFORM appl_log
               USING
                 lt_ret.

*&---------------------------------------------------------------------*
*&      Form  APPL_LOG
*&---------------------------------------------------------------------*
FORM appl_log USING pt_ret TYPE bapiret2_t.

  FIELD-SYMBOLS:
  <fs_ret> TYPE bapiret2.

  DATA:
    ls_log_handle      TYPE balloghndl,
    ls_log             TYPE bal_s_log,
    ls_msg             TYPE bal_s_msg,
    ls_display_profile TYPE bal_s_prof,
    ls_context         TYPE zbal_s_user01.

  ls_log-extnumber = 'Messages'.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = ls_log
    IMPORTING
      e_log_handle = ls_log_handle
    EXCEPTIONS
      OTHERS       = 1.

        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

  LOOP AT pt_ret ASSIGNING <fs_ret>.

    ls_msg-msgty = <fs_ret>-type.
    ls_msg-msgid = <fs_ret>-id.
    ls_msg-msgno = <fs_ret>-number.
* <fs_ret>-message.
    ls_msg-msgv1 = <fs_ret>-message_v1.
    ls_msg-msgv2 = <fs_ret>-message_v2.
    ls_msg-msgv3 = <fs_ret>-message_v3.
    ls_msg-msgv4 = <fs_ret>-message_v4.

* define context information
    ls_context-row = <fs_ret>-row.
    ls_msg-context-tabname = 'ZBAL_S_USER01'.
    ls_msg-context-value   =  ls_context.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle = ls_log_handle
        i_s_msg      = ls_msg
      EXCEPTIONS
        OTHERS       = 1.

        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

  ENDLOOP.

* Prepare to display the error
*  CALL FUNCTION 'BAL_DSP_PROFILE_NO_TREE_GET'
*    IMPORTING
*      e_s_display_profile = ls_display_profile.

  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    IMPORTING
      e_s_display_profile = ls_display_profile.

* use grid for display if wanted
  ls_display_profile-use_grid = 'X'.

  ls_display_profile-disvariant-report = sy-repid.
  ls_display_profile-disvariant-handle = 'LOG'.

* Display error messages
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = ls_display_profile
    EXCEPTIONS
      OTHERS              = 1.

        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

* Delete the messages inserted to application log
  CALL FUNCTION 'BAL_LOG_MSG_DELETE_ALL'
    EXPORTING
      i_log_handle  = ls_log_handle
    EXCEPTIONS
      log_not_found = 1
      OTHERS        = 2.

        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

ENDFORM.                    " APPL_LOG
